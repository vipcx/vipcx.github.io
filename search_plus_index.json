{"./":{"url":"./","title":"Introduction","keywords":"","body":"Vipcx会员营销系统官网 开源轻量领先 Vipcx是中国软件信息技术有限公司开发的一套开源的会员营销系统，支持B2B2C多商户模式，系统基于前后端分离的架构，后端采用Java SpringBoot + Mysql Mybatis Plus，前端基于当前流行的Uniapp、Element UI，支持小程序、h5。架构包含：会员端、后台管理端、收银台、后端接口，主要功能包含电子优惠券、预存卡、集次卡、短信发送、储值卡、会员积分、会员等级权益体系，支付收款等会员日常营销工具，适用于餐饮、零售、美业等各类实体门店的运营！ 请扫码体验： 当前版本：v3.1.0 更新时间：2024-09-09 开源仓库：Github 开源交流版 授权源码下载 注意：开源版本仅供学习和交流，商用必须购买授权，违者必究！ 系统介绍 fuint会员营销系统是一款轻量级的会员系统，功能完善、系统安全稳定、简单易用、支持多门店接入，满足您多方位的会员营销活动需求。 【会员体系】 会员体系包括会员管理、会员配置、会员等级管理、会员开卡赠礼等功能。管理员通过会员体系识别唯一用户，帮助企业构建标签及画像体系，赋能业务实现用户精细化运营和精准营销。 更多功能查看系统演示 【营销工具】 支持卡券营销、积分兑换、会员等级权益、开卡赠礼等丰富的营销工具，商户可根据需要选择合适的营销工具。 更多功能查看系统演示 【支付网关】 前端实现会员扫码支付、积分兑换现金支付。后台实现收款支付，营业员发起支付，使用扫码枪扫描支付。 更多功能查看系统演示 帮助与资源 用心服务好每一位商户 常见问题解答 (FAQ) 该会员营销系统的使用场景有哪些? 你们的系统支持多商户么?（支持多商户、多租户功能，可构筑SaaS商业模式） 开源版本和授权版本有啥区别?（授权版源码完整，提供技术支持） 你们系统支持定制开发么?（支持） 该系统的使用场景有哪些? fuint是一套开箱即用的会员营销系统，有会员管理、营销需求的企业或团队完全可以用作会员的管理和营销工具，系统包含会员积分体系、支付功能、订单功能等等基础的功能模块。 具体业务场景可用在： 1）会员管理系统：用作一套成熟会员管理系统，为用户提供全场景的会员管理解决方案，包括：会员注册、登录、会员等级、会员设置等等； 2）会员营销系统：用作公司营销系统，包括下单交易、积分营销、会员开卡礼、支付营销、卡券营销、分享裂变营销、储值营销等等； git add . && git commit -m \"update content\" && git push || git push © snowdreams1006 all right reserved，powered by Gitbook文件修订时间： 2025-08-26 06:27:40 "},"doc/1.项目介绍.html":{"url":"doc/1.项目介绍.html","title":"项目介绍","keywords":"","body":"B2B2C商城系统 欢迎交流需求，交流业务，交流技术（基础问题自行解决，其他问题先看文档后提问） 不用削尖脑袋往老群里加，老群活跃度较低，很多潜水党，新群相对而言活跃一些 :tw-1f606: :tw-1f606: :tw-1f606: :tw-1f606: :tw-1f606: :tw-1f606: PS： 演示站点所有环境均部署master分支。如果有演示站点问题，可以反馈，如果演示站点没问题本地运行有问题，需自行处理 交流 qq 1群 961316482（已满） 交流 qq 2群 875294241（已满） 交流 qq 3群 263785057（已满） 交流 qq 4群 674617534 (已满) 交流 qq 5群 594675235 体验 公众号/小程序/APP 体验，扫描二维码 商城介绍 官网：https://pickmall.cn Lilishop商城系统支持商家入驻，后端基于SpringBoot 研发，前端使用 Vue、uniapp开发， 系统全端全部代码开源 前后端分离，支持分布式部署，支持Docker，各个API独立，并且有独立的消费者。 商城 API/消费者 聚合版 api不需要单独部署，只需启动一个jar包就可以正常运转 如有需要，可以点击跳转 https://gitee.com/beijing_hongye_huicheng/lilishop-simplify 开发/使用/常见问题 帮助文档 https://docs.pickmall.cn 项目地址 gitee : https://gitee.com/beijing_hongye_huicheng github 镜像: https://github.com/lilishop?tab=repositories 商城UI 项目下3个文件夹 buyer：买家PC端，seller：商家端，manager：后台管理端 演示地址 PS：手机验证码为 ‘111111’ 平台管理端：https://admin-b2b2c.pickmall.cn 账号：admin/123456 店铺管理端：https://store-b2b2c.pickmall.cn 账号：13011111111/111111 商城PC页面：https://pc-b2b2c.pickmall.cn 商城 小程序/公众号/APP：扫描二维码 快速本地部署 点击跳转 商城数据库 使用docker-compose部署数据库，自动初始化数据库，不需要手动下载等操作 如果手动部署，才需要获取sql 点击跳转 （PS：这里有与tag版本一致的sql，如果是历史版本，则docker项目也切换至历史版本获取sql即可，历史版本升级则根据java相聚的根目录DB目录下的升级sql，按需执行）。 功能列表 平台管理端功能 卖家功能 商城前端功能展示 商城移动端 平台管理端 技术选型 架构图 后台技术选型 说明 框架 说明 基础框架 Spring Boot MVC框架 Spring MVC 持久框架 Mybatis-Plus 程序构建 Maven 关系型数据库 MySQL 消息中间件AMQP RocketMQ 缓存 Redis +MongoDB 搜索引擎 Elasticsearch 安全框架 Spring Security 数据库连接池 Druid 数据库分库分表 sharding 定时任务 xxl-job 负载均衡 Nginx 静态资源 阿里云OSS 短信 阿里云短信 认证 JWT 日志处理 Log4j 接口规范 RESTful 前端-运营后台、店铺后台 说明 框架 说明 框架 构建工具 webpack JS版本 ES6 基础JS框架 Vue.js 视频播放器 Dplayer 路由管理 Vue Router 状态管理 Vuex 基础UI库 iView UI界面基于 iView 网络请求 axios 前端-移动端 说明 架构 说明 架构 基础UI库 uViewui 基础框架 uni-app CSS预处理 scss 地图引擎 amap 版本升级 系统后续会提供多场景解决方案。 更多架构：微服务、Saas、中台等，都会支持。 支持差价升级商业授权 Copy 商业授权 商业版本与开源版本代码一致，没有区分 商业使用需要授权，授权方式可选择联系官网客服，或者qq群联系群主。 商业授权模式为永久授权，支持永久升级。 商业案例由于涉及部分多层二开关系，如需了解可以咨询销售。 开源须知 1.仅允许用于个人学习研究使用. 2.禁止将本开源的代码和资源进行任何形式任何名义的出售. 3.软件受国家计算机软件著作权保护（登记号：2021SR0805085）。 4.限制商用，如果需要商业使用请联系我们。QQ3409056806.或者加入qq群联系群主。 交流群 交流 qq 1群 961316482（已满） 交流 qq 2群 875294241（已满） 交流 qq 3群 263785057（已满） 交流 qq 4群 674617534（已满） 交流 qq 5群 594675235 附录 有人有自己的学习视频、学习记录文档、希望宣传关联开源项目等均可以私聊仓库所有者。 类似： 清晨敲代码同学的分析: https://blog.csdn.net/vaevaevae233/category_12103567.html © snowdreams1006 all right reserved，powered by Gitbook文件修订时间： 2025-08-26 06:17:23 "},"doc/部署文档/部署准备.html":{"url":"doc/部署文档/部署准备.html","title":"软件架构","keywords":"","body":"运行准备 上线准备 一套完整的域名（PC端、移动端、商家端、管理端、以及4个API端） ssl证书 域名备案 支付宝支付参数 微信支付参数 微信联合登陆参数 阿里云OSS参数 阿里云短信参数 快递鸟物流查询参数 最低服务器配置 2核16G内存服务器一台（推荐使用 CentOS 7.6 64位）（如果基础中间件使用外部服务器的，则可以适量减少内存） 环境准备 jdk >= 1.8 Mysql 8.x.x Redis >= 6.2.5 elasticsearch >= 7.3.0 需要IK分词器 rocket-server >= 4.7.0 xxl-job >= 2.3.0 Copy 以上环境为演示站点环境，尽可能使用同一版本 xxljob默认用户密码为: admin/111111 docker-compose环境安装（如果自行部署基础中间件，则可以略过这里，这里主要安装基础中间件） 安装docker-compose环境(已经安装的可以略过) #安装git sudo yum install -y git #安装maven sudo yum install -y maven #安装依赖 sudo yum install -y yum-utils device-mapper-persistent-data lvm2 #设置源 sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo sudo yum makecache fast #安装docker sudo yum install -y docker-ce #启动服务 sudo systemctl start docker #安装docker-compose curl -L https://github.com/docker/compose/releases/download/v2.17.1/docker-compose-linux-x86_64 > /usr/local/bin/docker-compose #授权 sudo chmod +x /usr/local/bin/docker-compose #检测版本号 docker-compose -v Copy docker脚本下载 git clone https://gitee.com/beijing_hongye_huicheng/docker.git Copy Rocketmq 需要特殊配制一下节点ip 在 config/broker.conf 文件中，将brokerIP1修改为部署docker的局域网ip 运行脚本（第一行为部署环境包括Mysql、mq、redis、xxljob等所有中间件） 必须保证es本地挂载目录权限为 777 否则es启动不成功。默认es本地挂载目录为docker项目上一级的volumes/data docker-compose up -d Copy 校验(查看进程是否启动，如果反复启动的程序，可以使用docker logs 镜像id 查看日志) docker ps Copy © snowdreams1006 all right reserved，powered by Gitbook文件修订时间： 2025-08-26 06:17:23 "},"doc/部署文档/部署程序.html":{"url":"doc/部署文档/部署程序.html","title":"软件版本","keywords":"","body":"部署项目 api部署 下载源码 cd /home/source git clone https://gitee.com/beijing_hongye_huicheng/lilishop.git Copy 编辑运行api的脚本 #版本 注意，需要跟随版本号进行调整 version=4.2.5 #代码目录 code_path=/home/source/lilishop #运行目录 run_path=/home/source/api/ mkdir -p ${code_path} mkdir -p ${run_path} cd ${code_path} git checkout master git pull mvn clean install -DskipTests ps -ef |grep java |grep buyer |grep -v 'grep'|awk '{print $2}' | xargs kill -9 ps -ef |grep java |grep seller |grep -v 'grep'|awk '{print $2}' | xargs kill -9 ps -ef |grep java |grep manager |grep -v 'grep'|awk '{print $2}' | xargs kill -9 ps -ef |grep java |grep common |grep -v 'grep'|awk '{print $2}' | xargs kill -9 ps -ef |grep java |grep consumer |grep -v 'grep'|awk '{print $2}' | xargs kill -9 rm -rf ${run_path}*.jar mv ${code_path}/common-api/target/common-api-$version.jar ${run_path} mv ${code_path}/buyer-api/target/buyer-api-$version.jar ${run_path} mv ${code_path}/consumer/target/consumer-$version.jar ${run_path} mv ${code_path}/manager-api/target/manager-api-$version.jar ${run_path} mv ${code_path}/seller-api/target/seller-api-$version.jar ${run_path} cd ${run_path} mkdir logs nohup java -Xmx256m -Xms128m -Xss256k -jar manager-api-$version.jar> logs/manager.out & nohup java -Xmx256m -Xms128m -Xss256k -jar common-api-$version.jar> logs/common.out & nohup java -Xmx256m -Xms128m -Xss256k -jar buyer-api-$version.jar> logs/buyer.out & nohup java -Xmx256m -Xms128m -Xss256k -jar consumer-$version.jar> logs/consumer.out & nohup java -Xmx256m -Xms128m -Xss256k -jar seller-api-$version.jar> logs/seller.out & Copy 执行脚本 chmod +x start-api.sh sh start-api.sh Copy 前端部署 下载代码 cd /home/source git clone https://gitee.com/beijing_hongye_huicheng/lilishop-ui.git Copy 安装node yarn yum update yum install -y nodejs yum install -y npm npm install -g yarn #设置镜像 yarn config set registry https://registry.npm.taobao.org --global yarn config set disturl https://npm.taobao.org/dist --global yarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass --global # 升级node npm install -g n n install v14.16.0 Copy 编辑脚本 #代码目录 code_path=/home/source/lilishop-ui cd ${code_path} git checkout master git pull cd ${code_path}/manager yarn install yarn build cd ${code_path}/seller yarn install yarn build cd ${code_path}/buyer yarn install yarn build Copy 执行脚本 chmod +x start-ui.sh sh start-ui.sh Copy h5部署没有技巧，需要从hbuilder中导出h5，复制到目录：/home/source/h5 安装nginx sudo yum install -y nginx Copy Nginx 示例配置文件 # For more information on configuration, see: # * Official English Documentation: http://nginx.org/en/docs/ # * Official Russian Documentation: http://nginx.org/ru/docs/ user nginx; worker_processes auto; error_log /var/log/nginx/error.log; pid /run/nginx.pid; # Load dynamic modules. See /usr/share/doc/nginx/README.dynamic. include /usr/share/nginx/modules/*.conf; events { worker_connections 1024; } http { log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; proxy_hide_header X-Powered-By; proxy_hide_header Server; # 开启gzip gzip on; # 启用gzip压缩的最小文件；小于设置值的文件将不会被压缩 gzip_min_length 1k; # gzip 压缩级别 1-10 gzip_comp_level 2; include /etc/nginx/mime.types; default_type application/octet-stream; # Load modular configuration files from the /etc/nginx/conf.d directory. # See http://nginx.org/en/docs/ngx_core_module.html#include # for more information. include /etc/nginx/conf.d/*.conf; #管理端 server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/pickmall.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/pickmall.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; server_name admin-b2b2c.pickmall.cn; try_files $uri $uri/ /index.html; root /home/source/lilishop-ui/manager/dist; } #商家端 server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/pickmall.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/pickmall.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; server_name store-b2b2c.pickmall.cn; try_files $uri $uri/ /index.html; root /home/source/lilishop-ui/seller/dist; } #h5端 server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/pickmall.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/pickmall.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; server_name m-b2b2c.pickmall.cn; try_files $uri $uri/ /index.html; root /home/source/h5; } #PC端 server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/pickmall.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/pickmall.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; server_name pc-b2b2c.pickmall.cn; try_files $uri $uri/ /index.html; root /home/source/lilishop-ui/buyer/dist; } #IM server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/pickmall.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/pickmall.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; server_name im.pickmall.cn; try_files $uri $uri/ /index.html; root /home/source/lili-shop-ui/im/dist; } #common-api server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/pickmall.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/pickmall.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; server_name common-api.pickmall.cn; location / { proxy_pass http://127.0.0.1:8890; } } #admin-api server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/pickmall.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/pickmall.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; server_name admin-api.pickmall.cn; location / { proxy_pass http://127.0.0.1:8887; } } #buyer-api server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/pickmall.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/pickmall.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; server_name buyer-api.pickmall.cn; location / { proxy_pass http://127.0.0.1:8888; } } #store-api server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/pickmall.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/pickmall.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; server_name store-api.pickmall.cn; location / { proxy_pass http://127.0.0.1:8889; } } #im-api server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/pickmall.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/pickmall.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; server_name im-api.pickmall.cn; location / { proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\"; proxy_set_header X-real-ip $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; proxy_pass http://127.0.0.1:8885; } } } Copy nginx 启动 service nginx restart Copy 维护 代码更新部署 cd /home/source sh start-api.sh sh start-ui.sh #h5 没有捷径，需要导出然后复制到线上对应目录 Copy © snowdreams1006 all right reserved，powered by Gitbook文件修订时间： 2025-08-26 06:17:23 "},"doc/部署文档/部署微服务.html":{"url":"doc/部署文档/部署微服务.html","title":"更新日志","keywords":"","body":"部署项目 上线准备 一套完整的域名（PC端、移动端、商家端、管理端、以及4个API端） ssl证书 域名备案 支付宝支付参数 微信支付参数 微信联合登陆参数 阿里云OSS参数 阿里云短信参数 快递鸟物流查询参数 最低服务器配置 4核32G内存服务器一台（推荐使用 CentOS 7.6 64位）（如果基础中间件使用外部服务器的，则可以适量减少内存） 环境准备 jdk 8/jdk 17 (jdk 17 启动服务时需要增加启动参数 '--add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED') Mysql 8.0.25 Redis 6.2.6 elasticsearch 7.17.5 需要IK分词器 rocket-server 4.9.2 xxl-job 2.3.0 nacos 2.3.0 seata 1.5.2 Copy 以上环境为演示站点环境，尽可能使用同一版本 中间件（如果自行部署基础中间件，则可以略过这里，这里主要安装基础中间件） kubernates https://gitee.com/beijing_hongye_huicheng/docker/tree/micro/kubernetes docker-compose(已经安装的可以略过) # 安装git sudo yum install -y git # 安装maven sudo yum install -y maven # 安装依赖 sudo yum install -y yum-utils device-mapper-persistent-data lvm2 # 设置源 sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo sudo yum makecache fast # 安装docker sudo yum install -y docker-ce # 启动服务 sudo systemctl start docker # 安装docker-compose curl -L https://github.com/docker/compose/releases/download/v2.17.1/docker-compose-linux-x86_64 > /usr/local/bin/docker-compose # 授权 sudo chmod +x /usr/local/bin/docker-compose # 检测版本号 docker-compose -v Copy docker脚本下载 git clone -b micro https://gitee.com/beijing_hongye_huicheng/docker.git Copy 修改配置 Rocketmq 需要特殊配制一下节点ip 在 config/broker.conf 文件中，将brokerIP1修改为部署docker的局域网ip Rocketmq 和 Elasticsearch 映射本地目录权限一定要设置为 777 权限，否则启动不成功 运行脚本（第一行为部署环境包括Mysql、mq、redis、xxljob等所有中间健） docker-compose up -d Copy 校验(查看进程是否启动，如果反复启动的程序，可以使用docker logs 镜像id 查看日志) docker ps Copy api部署 执行项目根目录脚本 chmod +x start-api.sh sh start-api.sh Copy 前端部署 编译 安装node yarn yum update yum install -y nodejs npm install -g yarn #设置镜像 yarn config set registry https://registry.npm.taobao.org --global yarn config set disturl https://npm.taobao.org/dist --global yarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass --global # 升级node npm install -g n n lts Copy 执行项目根目录脚本 chmod +x build.sh.sh sh build.sh.sh Copy h5部署没有技巧，需要从hbuilder中导出h5，复制到目录：/home/source/h5 部署 nginx 安装nginx yum install -y nginx Copy Nginx 示例配置文件 # For more information on configuration, see: # * Official English Documentation: http://nginx.org/en/docs/ # * Official Russian Documentation: http://nginx.org/ru/docs/ user nginx; worker_processes auto; error_log /var/log/nginx/error.log; pid /run/nginx.pid; # Load dynamic modules. See /usr/share/doc/nginx/README.dynamic. include /usr/share/nginx/modules/*.conf; events { worker_connections 1024; } http { log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; proxy_hide_header X-Powered-By; proxy_hide_header Server; # 开启gzip gzip on; # 启用gzip压缩的最小文件；小于设置值的文件将不会被压缩 gzip_min_length 1k; # gzip 压缩级别 1-10 gzip_comp_level 2; include /etc/nginx/mime.types; default_type application/octet-stream; # Load modular configuration files from the /etc/nginx/conf.d directory. # See http://nginx.org/en/docs/ngx_core_module.html#include # for more information. include /etc/nginx/conf.d/*.conf; #管理端 server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/xxx.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/xxx.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; server_name admin.xxx.cn; try_files $uri $uri/ /index.html; root /home/source/ui/manager/dist; } #商家端 server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/xxx.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/xxx.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; server_name store.xxx.cn; try_files $uri $uri/ /index.html; root /home/source/ui/seller/dist; } #h5端 server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/xxx.cn.pem\"; ssl_certific#商家端ate_key \"/etc/nginx/ssl/xxx.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; server_name m.xxx.cn; try_files $uri $uri/ /index.html; root /home/source/h5; } #PC端 server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/xxx.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/xxx.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; server_name pc.xxx.cn; try_files $uri $uri/ /index.html; root /home/source/lilishop-ui/buyer/dist; } #api-gateway server { listen 443 ssl; ssl_certificate \"/etc/nginx/ssl/xxx.cn.pem\"; ssl_certificate_key \"/etc/nginx/ssl/xxx.cn.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; server_name api.xxx.cn; location / { proxy_pass http://127.0.0.1:8888; } } } Copy nginx 启动 service nginx restart Copy © snowdreams1006 all right reserved，powered by Gitbook文件修订时间： 2025-08-26 06:17:23 "},"doc/部署文档/MINIO部署.html":{"url":"doc/部署文档/MINIO部署.html","title":"所需硬件","keywords":"","body":"MINIO部署 docker-compose文件下载 https://gitee.com/beijing_hongye_huicheng/docker/blob/master/docker-compose-minio.yml docker-compose部署 下载yml后执行docker-compose部署 docker-compose -f docker-compose-minio.yml up -d MINIO配置 系统配置 测试文件上传即可 © snowdreams1006 all right reserved，powered by Gitbook文件修订时间： 2025-08-26 06:17:23 "},"doc/2.常见问题.html":{"url":"doc/2.常见问题.html","title":"常见问题","keywords":"","body":"解决问题究极方法 将报错信息最根源的问题，放到百度/谷歌/bing 等网站，进行简单的搜索，可以解决百分之80的问题。 后端如何配置各种链接 本地运行时，更改根目录的 config目录下的 application.yml。 jar包运行时更改项目内resource目录下的application.yml。 前端如何配置API buyer/public/config.js seller/public/config.js manager/public/config.js 配置对应的api_dev/api_prod即可， api_dev，本地运行，例如yarn run dev这类型时读取。 api_prod 编译运行，例如yarn build 之后的项目，api读取api_prod中的配置文件。 H5 如何配置api 根目录/config/api.js dev，本地运行，例如yarn run dev这类型时读取。 prod 编译运行，例如yarn build 之后的项目，api读取api_prod中的配置文件。 功能限制，提示 演示站点禁止使用 配置文件配置中 lili.system.isDemoSite 为true时，系统部分功能限制，会出现这个提示。 第一次部署之后商品无法搜索 商品索引初始化位于 管理端=》系统设置=〉商品设置 ，点击重制商品索引，es目前官方使用7.3版本，且需要配置IK分词器，如果需要单独部署，注意版本兼容以及分词器问题处理。 URI [/lili_goods/_search?]\\[attrList] is not nested Elasticsearch exception [type=search_phase_execution_exception, reason=all shards failed]; nested exception is ElasticsearchStatusException[Elasticsearch exception [type=search_phase_execution_exception, reason=all shards failed]] 默认es索引mapping结构不对，执行索引初始化即可，商品索引初始化位于 管理端=》系统设置=〉商品设置 ，点击重制商品索引。 PS：注意es版本，目前演示站点7.3.x 其他版本如果出现问题自行解决兼容性问题。 自定义es分词无效 检查ik分词器的配置文件IKAnalyzer.cfg.xml中配置的api地址是否正确。 如使用的是docker compose一键部署，则路径在config/ik/config/IKAnalyzer.cfg.xml。 如使用的是自己安装的，则修改自己安装的ik分词器的配置文件。 管理端=》运营=》es分词 设置es自定义分词，设置完成后。需要重新生成相应商品索引，才会在搜索时生效。 ES内存不足 可以调整jvm启动参数，如使用的部署项目的docker-compose部署，则可以直接修改docker-compose文件里的启动参数，如 ... environment: cluster.name: elasticsearch discovery.type: single-node ES_JAVA_OPTS: -Xms256m -Xmx256m logging: driver: \"json-file\" options: max-size: \"50m\" ... Copy 已付款订单无法发货，状态为已付款 订单状态变成“代发货”，需要消费者服务启动（consumer），注意MQ是否异常。如果一切状态正确，订单会进入到代发货状态或者是取消状态。（为取消，则表示因为库存不足，或者促销活动库存不足问题）. SQL在哪里 点击跳转 https://gitee.com/beijing_hongye_huicheng/docker/tree/master/init/mysql 这里有与tag版本一致的sql，根据tag获取sql，如果使用master代码，则需要在lilishop项目根目录的update-sql目录中，获取对应的升级sql。 Unknown collation: 'utf8mb4_0900_ai_ci' 数据库版本不对，需要数据库8.x或者自行调整数据库中的字符集（直接将错误发百度，很多答案）。 短信功能问题 配置文件配置中 lili.system.isTestModel 为true时，系统不会真的发送短信，验证码默认为6个1。 如果想真实发短信，配置文件位置为：阿里云短信配置 移动端启动报错 小程序直播插件报错 在manifest中 删除代码。 Docker镜像端口号如何设置 群友反馈端口号没有映射，无法访问。 解释这个问题需要先了解docker 的网络模式的区别： 安装Docker时，它会自动创建三个网络，bridge（创建容器默认连接到此网络）、 none 、host host：容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。 Container：创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围。 None：该模式关闭了容器的网络功能。 Bridge：此模式会为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，通过docker0网桥以及Iptables nat表配置与宿主机通信。 完整的解释https://www.cnblogs.com/zuxing/articles/8780661.html 示例中应用的镜像脚本，网络模型都是host，所以它采用的是宿主机的端口，所以无法看到映射内容。 Docker API 没有dockerfile如何打包？ 使用的是maven打包插件，执行命令即可 mvn clean package docker:build -DskipTests -DpushImage Copy 密码能否手动设置 前端交互时，已经对密码进行md5处理，在后端接收方，会进行二次加密，所以如果需要手动设置密码，需要经过两次加密后写在数据库才可以。 xxljob干嘛用的 定时任务定时调度，不启动不会报错，但是会影响定时任务，例如商品评分店铺评分。 rocketmq 干嘛用的 消息队列，即把一部分任务放在一个地方排序，让消费者去顺序消费。可以让一些场景不被卡住，例如下单场景，可以先下单成功，并发下单不会卡死，让用户的请求被卡住。 数据库模型 id是什么时候写入的 查看此类 cn.lili.base.mybatisplus.MyMetaObjectHandler，简单来说就是在数据库实际操作前，会对对象进行二次操作，比如判定没有id则写入id，有id则不覆盖这样的逻辑。 配置文件问题 springboot jar包运行时，默认加载项目中的配置文件，同时扫描运行目录的config目录，如果有配置文件，会覆盖项目中原有的配置文件。 属性覆盖 例如项目resource目录下，有个配置文件中配置 lili.system.isDemoSite 为 true 项目根目录有config文件夹，里边有文件application.yml，配置信息中 lili.system.isDemoSite 为false，则项目启动时加载的信息为false。 属性叠加 项目resource目录下，有配置文件，配置了项目端口号。根目录也有配置文件中，没有配置运行端口号，则还按照项目中的配置的端口号去运行。 MINIO部署配置 点击查看 swagger-ui.html无法打开 项目访问 doc.html 即可，使用到了一个ui具体详情可以自行研究。 IM 在哪儿 过渡阶段IM开源地址 https://gitee.com/beijing_hongye_huicheng/springboot-websocket 参照readme部署即可，注意数据库需要额外导入以及ws链接的配置 商业授权模式 商业授权，代码没有不同的地方，商业授权只是一致合同协议，未被商业授权进行商业运营，会有律师函送到。商业授权费用很低，只是作为引流的手段。 商业使用问题，授权问题 联系QQ(800181125)即可 © snowdreams1006 all right reserved，powered by Gitbook文件修订时间： 2025-08-26 06:17:23 "},"doc/部署文档/后端多环境配置.html":{"url":"doc/部署文档/后端多环境配置.html","title":"后端多环境配置","keywords":"","body":"后端多环境配置 设定环境 一般情况下，设有以下环境： dev（开发环境） test（测试环境） uat（预发布环境） prod（生产环境） 修改 spring 配置文件 将具体服务的 application.yml 文件增加后缀名为对于环境名如 开发环境 application-dev.yml 如需其他环境可复制多份，改为对应环境名称 新建 application.yml 文件 spring: profiles: active: @profileActive@ Copy profileActive 为 maven 配置文件中的变量 修改 maven 配置文件 修改项目根目录的 pom.xml 文件， 在 标签里添加以下内容 dev true dev test test prod prod Copy 其中 id 和 profileActive 的值为环境名。 activeByDefault 为默认环境 额外配置(可选) maven中的profile的激活条件还可以根据jdk、操作系统、文件存在或者缺失来激活。这些内容都是在 标签中配置，如下： true 1.8 [1.8,) Windows XP Windows x86 5.1.2600 Copy 修改 logback-spring.xml 为所有 appender 标签和 appender-ref 标签 增加 , name 里面的内容为所有环境的值 以下为修改后的文件 ${APP_NAME} ${LOG_FILE_PATH}/${APP_NAME}-%d{yyyy-MM-dd}.log 30 ${FILE_LOG_PATTERN} ${LOG_FILE_PATH}/rocketmq.log ${LOG_FILE_PATH}/rocketmq/rocketmq-%d{yyyy-MM-dd}.log 30 30MB %d{yy-MM-dd.HH:mm:ss.SSS} [%-16t] %-5p %-22c{0} %X{ServiceId} - %m%n ${LOGSTASH_SERVER} UTC {\"appName\":\"${APP_NAME}\"} Copy 多环境启动 maven 打包 可使用 -P 参数，参数后跟环境名，如 -P dev 以下为示例 mvn clean install package -P dev -Dmaven.test.skip=true Copy ｜ 注：使用 -P参数打包之后 application.yml 里面的 @profileActive@ 会修改为对应参数。打包完成，不带参数的 jar 启动会默认为 -P 后面填写的环境 jar 启动参数 jar 启动时，可根据启动参数，指定启动环境 --spring.profiles.active=xxx, xxx 为环境名 以下为示例 java -jar xxx.jar --spring.profiles.active=test Copy 资源过滤（可选） 如果不配置这一步，将会在任何环境下打包都会带上全部的配置文件，可以配置只保留对应环境下的配置文件，这样安全性更高。 | 配置完成这一步，便无法根据 jar 启动参数切换环境 在 pom.xml 文件中指定 过滤的条件即可，如下： src/main/resources application*.properties src/main/resources true application.yml application-${profileActive}.yml Copy © snowdreams1006 all right reserved，powered by Gitbook文件修订时间： 2025-08-26 06:17:23 "}}